import dayjs from "dayjs";
import { prisma } from "../services/prisma.js";

async function sendSubscriptionReminder(bot, chatId, subscriptionEnd) {
    const now = dayjs();
    const daysUntilEnd = dayjs(subscriptionEnd).diff(now, 'days');

    const user = await prisma.users.findFirst({
        where: {chatId},
    })
    
    if (daysUntilEnd === 3) {
        user.paidCard 
        ? 
        await bot.sendMessage(chatId, `–í–∞—à —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.`, {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "–ü—Ä–æ–¥–ª–∏—Ç—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞", callback_data: "ref_payment"}]
                ]
            })
        })
        : 
        await bot.sendPhoto(chatId, "./assets/db/images/IMG_5183.JPG", {caption: "–í—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{text: "üóì –ú–µ—Å—è—Ü - 150 —Ä—É–±", callback_data: "one_month_sub"}],
                            [{text: "üóì 3 –º–µ—Å—è—Ü–∞ - 425 —Ä—É–±", callback_data: "three_months_sub"}],
                            [{text: "üóì 6 –º–µ—Å—è—Ü–µ–≤ - 800 —Ä—É–±", callback_data: "six_months_sub"}],
                            [{text: "üóì –ì–æ–¥ - 1550", callback_data: "one_year_sub"}]
                        ]
                    })})
                    
    } else if (daysUntilEnd === 0) {
        await bot.sendMessage(chatId, `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º.`);
    }
}

export async function checkSubscriptions(bot) {
    const usersWithActiveSubscriptions = await prisma.users.findMany({
        where: {
            subStatus: true, 
            subscriptionEnd: {
                gte: dayjs().toDate(), 
                lte: dayjs().add(3, 'day').toDate(),
            },
        },
    });

    for (const user of usersWithActiveSubscriptions) {
        await sendSubscriptionReminder(bot, user.chatId, user.subscriptionEnd);
    }

    const usersWithExpiredSubscriptions = await prisma.users.findMany({
        where: {
            subStatus: true, 
            subscriptionEnd: {
                lt: dayjs().toDate(),
            },
        },
    });

    for (const user of usersWithExpiredSubscriptions) {
        user.paidCard 
        ? 
        await bot.sendMessage(chatId, `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.`, {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "–ü—Ä–æ–¥–ª–∏—Ç—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞", callback_data: "ref_payment"}]
                ]
            })
        })
        : 
        await bot.sendPhoto(chatId, "./assets/db/images/IMG_5183.JPG", {caption: "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º.", reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{text: "üóì –ú–µ—Å—è—Ü - 150 —Ä—É–±", callback_data: "one_month_sub"}],
                            [{text: "üóì 3 –º–µ—Å—è—Ü–∞ - 425 —Ä—É–±", callback_data: "three_months_sub"}],
                            [{text: "üóì 6 –º–µ—Å—è—Ü–µ–≤ - 800 —Ä—É–±", callback_data: "six_months_sub"}],
                            [{text: "üóì –ì–æ–¥ - 1550", callback_data: "one_year_sub"}],
                            [{text: "–ù–∞–∑–∞–¥", callback_data: "main"}]
                        ]
                    })})
        await bot.sendMessage(user.chatId, `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º.`) 

        if (user.currentSubCount < 1){
            return await prisma.users.update({
                where: { id: user.id },
                data: { subStatus: false, currentSubCount: 0 },
            });
        } 
        
        return await prisma.users.update({
            where: {id: user.id},
            data: {subStatus: true, currentSubCount: user.currentSubCount - 1}
        })
    }
}
