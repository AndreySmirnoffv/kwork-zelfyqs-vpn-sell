import { adminKeyboard, profileKeyboard, startKeyboard } from '../keyboards/keyboards.js'
import {prisma} from '../services/prisma.js'
import dotenv from 'dotenv'
import * as fs from 'fs'

dotenv.config()

export async function createUser(bot, msg) {
    const user = await prisma.users.findFirst({
        where: { chatId: msg.chat.id }
    });
    if (user?.blocked) {
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
        return await bot.sendMessage(msg.chat.id, "–í–∞–º —Å—é–¥–∞ –Ω–µ–ª—å–∑—è");
    }

    if (!user) {
        await prisma.users.create({
            data: {
                firstname: msg.from.first_name || "undefined",
                lastname: msg.from.last_name || "undefined",
                chatId: msg.chat.id,
                username: msg.from.username,
                balance: 0,
                isAdmin: false,
                ref: `${process.env.BOT_LINK}?start=${msg.chat.id}`,
                origin: msg.text.replace("/start", "")
            }
        });
    }

    if (user?.isAdmin) {
        console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
        return await bot.sendMessage(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω", { reply_markup: adminKeyboard });
    }

    const videoPath = "./assets/db/images/start.gif";
    
    if (!fs.existsSync(videoPath)) {
        console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${videoPath}`);
        return await bot.sendMessage(msg.chat.id, "–û—à–∏–±–∫–∞: –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.");
    }

    console.log(`‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${videoPath}, –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...`);

    return await bot.sendVideo(msg.chat.id, videoPath, {
        caption: `–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ShieldSurf!
    
–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –° –Ω–∞–º–∏ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:

‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏ –±—ã—Å—Ç—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ –ª–∞–≥–æ–≤
‚úÖ –î–æ—Å—Ç—É–ø –∫ –ª—é–±–∏–º—ã–º —Å–µ—Ä–≤–∏—Å–∞–º –≤ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
‚úÖ –ü–æ–ª–Ω—É—é –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –±–∞—Ç–∞—Ä–µ—é –∏ —Ç—Ä–∞—Ñ–∏–∫

ShieldSurf ‚Äî —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π VPN –Ω–∞ —Ä—ã–Ω–∫–µ! üî•

–ù–∞–∂–∏–º–∞–π ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è¬ª –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!`,
        reply_markup: startKeyboard
    });
}
 

export async function profile(bot, chatId){
    const user = await prisma.users.findFirst({
        where: {chatId}
    })

    console.log(user.substatus)

    await bot.sendMessage(chatId, `üíº –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
        
üë§ –ò–º—è: ${user?.firstname} ${user?.lastname}
üÜî ID: ${user?.chatId}
‚ôªÔ∏è –†–µ—Ñ. –±–∞–ª–∞–Ω—Å: ${user?.balance}

üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: 22.01.2025 18:13
${user?.substatus ? "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç" :  "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞" } `, profileKeyboard)
}

export async function subscribtions(bot, chatId) {
    try {
        const user = await prisma.users.findUnique({
            where: { chatId },
            select: {
                id: true,
                firstname: true,
                lastname: true,
                balance: true,
                substatus: true,
                subscriptions: {
                    select: {
                        type: true,
                        status: true,
                        endDate: true
                    }
                }
            }
        });

        if (!user.subscriptions || user.subscriptions.length === 0) {
            return await bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.");
        }

        const chunkSize = 6;
        let messages = [];
        let buttons = [];

        user.subscriptions.forEach((sub, index) => {
            const formattedDate = sub.endDate 
                ? new Date(sub.endDate).toLocaleString("ru-RU", {
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                    hour: "2-digit",
                    minute: "2-digit"
                })
                : "–ù–µ —É–∫–∞–∑–∞–Ω–∞";

            if (index % chunkSize === 0) {
                messages.push(`üíº *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n` +
                    `üë§ *–ò–º—è:* ${user.firstname ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} ${user.lastname ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n` +
                    `üÜî *ID:* ${chatId}\n` +
                    `‚ôªÔ∏è *–†–µ—Ñ. –±–∞–ª–∞–Ω—Å:* ${user.balance} ‚ÇΩ\n\n`);
                buttons.push([]);
            }

            messages[messages.length - 1] += 
                `üìÖ *–ü–æ–¥–ø–∏—Å–∫–∞:* ${sub.type} (–¥–æ ${formattedDate})\n` +
                `${sub.status ? "‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç*" : "‚ùå *–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞*"}\n\n`;

            buttons[buttons.length - 1].push([
                {
                    text: `–ü—Ä–æ–¥–ª–∏—Ç—å ${sub.type}`,
                    callback_data: `pay_${sub.type}`
                }
            ]);
        });

        for (let i = 0; i < messages.length; i++) {
            await bot.sendMessage(chatId, messages[i], {
                parse_mode: "Markdown",
                reply_markup: { inline_keyboard: buttons[i] }
            });
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫:", error);
        await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
}
