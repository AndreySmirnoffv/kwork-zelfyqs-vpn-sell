import { adminKeyboard, profileKeyboard, startKeyboard } from '../keyboards/keyboards.js';
import { prisma } from '../services/prisma.js';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import fs from 'fs';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function sendErrorMessage(bot, chatId, errorMessage) {
    console.error(errorMessage);
    return await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: " + errorMessage);
}

export async function createUser(bot, msg) {
    try {
        const user = await prisma.users.findFirst({
            where: { chatId: msg.chat.id }
        });
        
        if (user?.blocked) {
            return await bot.sendMessage(msg.chat.id, "–í–∞–º —Å—é–¥–∞ –Ω–µ–ª—å–∑—è");
        }

        if (!user) {
            await prisma.users.create({
                data: {
                    firstname: msg.from.first_name || "undefined",
                    lastname: msg.from.last_name || "undefined",
                    chatId: msg.chat.id,
                    username: msg?.from?.username || "undefined",
                    balance: 0,
                    isAdmin: false,
                    ref: `${process.env.BOT_LINK}?start=${msg.chat.id}`,
                    origin: msg.text.replace("/start", "")
                }
            });
        }

        if (user?.isAdmin) {
            return await bot.sendMessage(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω", adminKeyboard);
        }

        const videoPath = path.resolve(__dirname, '../db/images/start.gif');
        if (!fs.existsSync(videoPath)) {
            return await sendErrorMessage(bot, msg.chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: " + videoPath);
        }

        return await bot.sendVideo(msg.chat.id, videoPath, {
            caption: `–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ShieldSurf!\n\n
            –¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –° –Ω–∞–º–∏ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n\n
            ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏\n
            ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏ –±—ã—Å—Ç—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ –ª–∞–≥–æ–≤\n
            ‚úÖ –î–æ—Å—Ç—É–ø –∫ –ª—é–±–∏–º—ã–º —Å–µ—Ä–≤–∏—Å–∞–º –≤ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö\n
            ‚úÖ –ü–æ–ª–Ω—É—é –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫\n
            ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –±–∞—Ç–∞—Ä–µ—é –∏ —Ç—Ä–∞—Ñ–∏–∫\n\n
            ShieldSurf ‚Äî —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π VPN –Ω–∞ —Ä—ã–Ω–∫–µ! üî•\n\n
            –ù–∞–∂–∏–º–∞–π ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è¬ª –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!\n\n
            ‚ö†Ô∏è –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, —Ç–æ –µ–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç¬ª`,
            reply_markup: startKeyboard
        });
        
        
    } catch (error) {
        console.log(error)
        return await sendErrorMessage(bot, msg.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: " + error.message);
    }
}

export async function profile(bot, chatId) {
    try {
        const user = await prisma.users.findFirst({
            where: { chatId }
        });

        const substatus = user?.substatus ? "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç" : "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞";
        const profileMessage = `üíº –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n
        üë§ –ò–º—è: ${user?.firstname} ${user?.lastname}\n
        üÜî ID: ${user?.chatId}\n
        ‚ôªÔ∏è –†–µ—Ñ –±–∞–ª–∞–Ω—Å: ${user?.balance}\n\n
        üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: 22 01 2025 18:13\n
        ${substatus}`;

        await bot.sendMessage(chatId, profileMessage, {
            parse_mode: "HTML",
            reply_markup: profileKeyboard
        });
    } catch (error) {
        return await sendErrorMessage(bot, chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: " + error.message);
    }
}

export async function subscribtions(bot, chatId) {
    try {
        const user = await prisma.users.findUnique({
            where: { chatId },
            select: {
                id: true,
                firstname: true,
                lastname: true,
                balance: true,
                substatus: true,
                subscriptions: {
                    select: {
                        type: true,
                        status: true,
                        endDate: true
                    }
                }
            }
        });

        if (!user.subscriptions || user.subscriptions.length === 0) {
            return await bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫");
        }

        const chunkSize = 6;
        let messages = [];
        let buttons = [];

        user.subscriptions.forEach((sub, index) => {
            const formattedDate = sub.endDate
                ? new Date(sub.endDate).toLocaleString("ru-RU", {
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                    hour: "2-digit",
                    minute: "2-digit"
                })
                : "–ù–µ —É–∫–∞–∑–∞–Ω–∞";

            if (index % chunkSize === 0) {
                messages.push(`üíº <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n` +
                    `<b>–ò–º—è:</b> ${user.firstname ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} ${user.lastname ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n` +
                    `<b>ID:</b> ${chatId}\n` +
                    `<b>–†–µ—Ñ –±–∞–ª–∞–Ω—Å:</b> ${user.balance} ‚ÇΩ\n\n`);
                buttons.push([]);
            }

            messages[messages.length - 1] +=
                `<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> ${sub.type} (–¥–æ ${formattedDate})\n` +
                `${sub.status ? "<b>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç</b>" : "<b>‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>"}\n\n`;

            buttons[buttons.length - 1].push([
                {
                    text: `–ü—Ä–æ–¥–ª–∏—Ç—å ${sub.type}`,
                    callback_data: `pay_${sub.type}`
                }
            ]);
        });

        for (let i = 0; i < messages.length; i++) {
            await bot.sendMessage(chatId, messages[i], {
                parse_mode: "HTML",
                reply_markup: { inline_keyboard: buttons[i] }
            });
        }
    } catch (error) {
        return await sendErrorMessage(bot, chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: " + error.message);
    }
}
