import { adminKeyboard, profileKeyboard, startKeyboard } from '../keyboards/keyboards.js';
import { prisma } from '../services/prisma.js';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import fs from 'fs';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function sendErrorMessage(bot, chatId, errorMessage) {
    console.error(errorMessage);
    return await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: " + errorMessage);
}

export async function createUser(bot, msg) {
    try {
        const user = await prisma.users.findFirst({
            where: { chatId: msg.chat.id }
        });
        
        if (user?.blocked) {
            return await bot.sendMessage(msg.chat.id, "–í–∞–º —Å—é–¥–∞ –Ω–µ–ª—å–∑—è");
        }

        if (!user) {
            await prisma.users.create({
                data: {
                    firstname: msg.from.first_name || "undefined",
                    lastname: msg.from.last_name || "undefined",
                    chatId: msg.chat.id,
                    username: msg?.from?.username || "undefined",
                    balance: 0,
                    isAdmin: false,
                    ref: `${process.env.BOT_LINK}?start=${msg.chat.id}`,
                    origin: msg.text.replace("/start", "")
                }
            });
        }

        if (user?.isAdmin) {
            return await bot.sendMessage(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω", adminKeyboard);
        }

        const videoPath = path.resolve(__dirname, '../db/images/start.gif');
        if (!fs.existsSync(videoPath)) {
            return await sendErrorMessage(bot, msg.chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: " + videoPath);
        }

        return await bot.sendVideo(msg.chat.id, videoPath, {
            caption: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NXSTORE VPN!
–¢—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ ‚Äî –∑–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, —Å–≤–æ–±–æ–¥–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.

–ú—ã ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π VPN-—Å–µ—Ä–≤–∏—Å, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö NX.
‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
üîê –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ‚Äî –æ—Ç —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ –¥–æ –¢–í

–ë–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É. –¢–æ–ª—å–∫–æ —Ç—ã –∏ —Å–≤–æ–±–æ–¥–∞ –≤ —Å–µ—Ç–∏.

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
‚úîÔ∏è –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPN
‚úîÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
‚úîÔ∏è –ü—Ä–æ–¥–ª–µ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤
‚úîÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫

–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º, –∑–∞—â–∏—â—ë–Ω–Ω—ã–º –∏ –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü ‚Äî –∏ –¥–µ–ª–∞–µ–º –≤—Å—ë, —á—Ç–æ–±—ã —Ç—ã —ç—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª —Å –ø–µ—Ä–≤—ã—Ö —Å–µ–∫—É–Ω–¥.

–ì–æ—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è? –î–µ–π—Å—Ç–≤—É–π üëá

`,
            reply_markup: startKeyboard
        });
        
        
    } catch (error) {
        console.log(error)
        return await sendErrorMessage(bot, msg.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: " + error.message);
    }
}

export async function profile(bot, chatId) {
    try {
        const user = await prisma.users.findFirst({
            where: { chatId }
        });

        const substatus = user?.substatus ? "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç" : "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞";
        const profileMessage = `üíº –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n
        üë§ –ò–º—è: ${user?.firstname} ${user?.lastname}\n
        üÜî ID: ${user?.chatId}\n
        ‚ôªÔ∏è –†–µ—Ñ –±–∞–ª–∞–Ω—Å: ${user?.balance}\n\n
        üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: 22 01 2025 18:13\n
        ${substatus}`;

        await bot.sendMessage(chatId, profileMessage, {
            parse_mode: "HTML",
            reply_markup: profileKeyboard
        });
    } catch (error) {
        return await sendErrorMessage(bot, chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: " + error.message);
    }
}

export async function subscribtions(bot, chatId) {
    try {
        const user = await prisma.users.findUnique({
            where: { chatId },
            select: {
                id: true,
                firstname: true,
                lastname: true,
                balance: true,
                substatus: true,
                subscriptions: {
                    select: {
                        type: true,
                        status: true,
                        endDate: true
                    }
                }
            }
        });

        if (!user.subscriptions || user.subscriptions.length === 0) {
            return await bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫");
        }

        const chunkSize = 6;
        let messages = [];
        let buttons = [];

        user.subscriptions.forEach((sub, index) => {
            const formattedDate = sub.endDate
                ? new Date(sub.endDate).toLocaleString("ru-RU", {
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                    hour: "2-digit",
                    minute: "2-digit"
                })
                : "–ù–µ —É–∫–∞–∑–∞–Ω–∞";

            if (index % chunkSize === 0) {
                messages.push(`üíº <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n` +
                    `<b>–ò–º—è:</b> ${user.firstname ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} ${user.lastname ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n` +
                    `<b>ID:</b> ${chatId}\n` +
                    `<b>–†–µ—Ñ –±–∞–ª–∞–Ω—Å:</b> ${user.balance} ‚ÇΩ\n\n`);
                buttons.push([]);
            }

            messages[messages.length - 1] +=
                `<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> ${sub.type} (–¥–æ ${formattedDate})\n` +
                `${sub.status ? "<b>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç</b>" : "<b>‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>"}\n\n`;

            buttons[buttons.length - 1].push([
                {
                    text: `–ü—Ä–æ–¥–ª–∏—Ç—å ${sub.type}`,
                    callback_data: `pay_${sub.type}`
                }
            ]);
        });

        for (let i = 0; i < messages.length; i++) {
            await bot.sendMessage(chatId, messages[i], {
                parse_mode: "HTML",
                reply_markup: { inline_keyboard: buttons[i] }
            });
        }
    } catch (error) {
        return await sendErrorMessage(bot, chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: " + error.message);
    }
}
