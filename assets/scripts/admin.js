import { prisma } from "../services/prisma.js";
import { waitForText } from "../utils/waitForText.js";
import prices from "../db/db.json" with {type: "json"}

export async function blockUser(bot, chatId){
    await bot.sendMessage(chatId, "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
    const username =  await waitForText(bot, chatId)


    const isBlockedUser = await prisma.users.findFirst({
        where: {
            username
        }
    })

    if (!isBlockedUser){
        return await bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω")
    }

    const user = await prisma.users.update({
        where: {
            username
        },
        data: {
            blocked: true
        }
    })

    await deleteConfig(user)

    return await bot.sendMessage(chatId, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
}

export async function adminIncome(bot, chatId) {
    const incomeResponse = await prisma.payments.findMany({
        where: { status: "succeeded" },
        select: { amount: true },
    });

    const totalIncome = incomeResponse
        .map(payment => parseFloat(payment.amount))
        .reduce((sum, current) => sum + current, 0);

    return await bot.sendMessage(chatId, `–í–∞—à –¥–æ—Ö–æ–¥ —Å–æ—Å—Ç–∞–≤–∏–ª: ${totalIncome} RUB`);
}

export async function refPayments(bot, chatId){
    const refPayments = await prisma.refpayments.findMany({
        select: { amount: true }
    })

    const totalRefIncome = refPayments.map(payment => parseFloat(payment.amount)).reduce((sum, current) => sum + current, 0)

    return await bot.sendMessage(chatId, `–í—ã–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º —Å–æ—Å—Ç–∞–≤–∏–ª–∞: ${totalRefIncome} RUB`)
}

export async function getUser(bot, chatId){

    await bot.sendMessage(chatId, "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å")

    const username = await waitForText(bot, chatId)

    const user = await prisma.users.findFirst({
        where: username,
    })
    
    return await bot.sendMessage(chatId, `üíº –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

        üë§ –ò–º—è: ${user.firstname} ${user.lastname}
        üÜî ID: ${user.chatId}
        üí∏ –ë–∞–ª–∞–Ω—Å: ${user.balance}
        ‚ôªÔ∏è –†–µ—Ñ. –±–∞–ª–∞–Ω—Å: ${user.balance}
        
        üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: 22.01.2025 18:13
        ${user.subStatus ? "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç" :  "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞" } `)
}

export async function changeVpnPrices(bot, chatId) {
    await bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏ –∫–∞–∫—É—é —Ü–µ–Ω—É —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:
1. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü - ${prices.one_month_sub.price} —Ä—É–±.
2. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ - ${prices.three_months_sub.price} —Ä—É–±.
3. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ - ${prices.six_months_sub.price} —Ä—É–±.
4. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥ - ${prices.one_year_sub.price} —Ä—É–±.
–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ (1-4)`);

    let message = await waitForText(bot, chatId);
    let selectedSubscription;

    switch (message) {
        case "1":
            selectedSubscription = "one_month_sub";
            break;
        case "2":
            selectedSubscription = "three_months_sub";
            break;
        case "3":
            selectedSubscription = "six_months_sub";
            break;
        case "4":
            selectedSubscription = "one_year_sub";
            break;
        default:
            await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.");
            return;
    }

    await bot.sendMessage(chatId, `–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è ${prices[selectedSubscription].price} —Ä—É–±.`);

    let newPrice = await waitForText(bot, chatId);

    if (!/^\d+$/.test(newPrice)) {
        await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.");
        return;
    }

    prices[selectedSubscription].price = Number(newPrice);
    
    return await bot.sendMessage(chatId, `–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞! –ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å ${prices[selectedSubscription].price} —Ä—É–±.`);
}
