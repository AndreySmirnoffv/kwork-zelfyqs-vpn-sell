import { checkout } from "../services/payment.js";
import { prisma } from "../services/prisma.js";
import { v4 } from "uuid";
import { handleSubscription } from "./subscribtions.js";
import prices from '../db/db.json' with {type: "json"}
import axios from "axios";
import { createVlessConfig } from "./vless.js";

let paymentIntervals = {}; 

export async function createPayment(bot, userId, data, username) {

    console.log(prices[data].price)

    try {
        const payload = {
            amount: {
                value: prices[data].price,
                currency: "RUB",
            },
            confirmation: {
                type: "redirect",
                return_url: "https://fastfood-tips.ru/auth",
            },
        };

        const {id, status, paid, amount, confirmation} = await checkout.createPayment(payload, v4());

        await prisma.payments.create({
            data: {
                paymentId: id,
                status,
                paid,
                userId,
                amount: amount.value,
            },
        });


        const intervalId = setInterval(
            async () => await capturePayment(bot, userId, id, payload.amount.value, data, username),
            10000
        );

        paymentIntervals[id] = intervalId;

        return await bot.sendMessage(userId, `–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ `, {
            reply_markup: {
                inline_keyboard: [
                    [{text: "–û–ø–ª–∞—Ç–∏—Ç—å", url: confirmation.confirmation_url}]
                ]
            }
        })
    } catch (error) {
        console.error(error);
    }
}

async function capturePayment(bot, chatId, paymentId, price, data, username) {
    try {
        const paymentResponse = await checkout.getPayment(paymentId);
        console.log(paymentResponse);


        if (paymentResponse.status !== "waiting_for_capture" || (Date.now() - new Date(paymentResponse.created_at).getTime()) > 600000) {
            clearInterval(paymentIntervals[paymentId]);
            return delete paymentIntervals[paymentId];
        }

        const payload = {
            amount: {
                value: price,
                currency: "RUB",
            },
        };

        const paymentResponsee = await checkout.capturePayment(paymentResponse.id, payload);
        console.log(paymentResponsee);

        await prisma.payments.update({
            where: { paymentId },
            data: { status: paymentResponse.status },
        });

        return await succeedPayment(bot, chatId, paymentId, data, username);
    } catch (error) {
        console.error(error);
    }
}

async function succeedPayment(bot, chatId, paymentId, data, username) {
    try {
        const paymentResponse = await checkout.getPayment(paymentId);

        if (paymentResponse.status === "succeeded") {
            await prisma.payments.update({
                where: { paymentId },
                data: {
                    status: paymentResponse.status,
                    paid: paymentResponse.paid,
                },
            });

            const subscriptionDuration = data.duration || 30;
            const endDate = new Date();
            endDate.setDate(endDate.getDate() + subscriptionDuration);

            const chatIdBigInt = BigInt(chatId);

            console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId:", chatIdBigInt);
            const user = await prisma.users.findFirst({
                where: { chatId: chatIdBigInt },
            });

            if (!user) {
                throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }
            console.log("–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user);

            await prisma.subscription.create({
                data: {
                    userId: user.id,
                    status: true,
                    type: data.type || "default",
                    startDate: new Date(),
                    endDate: endDate,
                },
            });

            await prisma.users.update({
                where: { chatId: chatIdBigInt },
                data: {
                    paidCard: true,
                },
            });

            if (user.origin !== null && user.origin !== "start") {
                const originUserSubscription = await prisma.users.findFirst({
                    where: { chatId: BigInt(user.origin) }, 
                });
                console.log("originUserSubscription:", originUserSubscription);

                if (!originUserSubscription) {
                    console.error("–ü–æ–¥–ø–∏—Å–∫–∞ originUser –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                } else if (!originUserSubscription.status) {
                    await prisma.users.update({
                        where: { chatId: BigInt(user.origin) },
                        data: {
                            balance: 25,
                        },
                    });
                } else {
                    await prisma.users.update({
                        where: { chatId: BigInt(user.origin) },
                        data: {
                            balance: 50,
                        },
                    });
                }
            }

            await bot.sendMessage(chatId, `1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard

Android: –ó–∞–π–¥–∏—Ç–µ –≤ Google Play –∏ —Å–∫–∞—á–∞–π—Ç–µ WireGuard: <a href="https://play.google.com/store/search?q=wireguard&c=apps">Google Play</a>.
iOS: –û—Ç–∫—Ä–æ–π—Ç–µ App Store –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard: <a href="https://apps.apple.com/app/id1441195209">App Store</a>.
Windows: –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å <a href="https://www.wireguard.com/install/">–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞</a>.
macOS: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ <a href="https://apps.apple.com/app/id1441195209">App Store</a> –∏–ª–∏ —Å <a href="https://www.wireguard.com/install/">–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞</a>.
Linux: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>apt install wireguard</code> –¥–ª—è Debian/Ubuntu).
Android TV: –ù–∞–π–¥–∏—Ç–µ WireGuard –≤ <a href="https://play.google.com/store/search?q=wireguard&c=apps">Google Play</a> –Ω–∞ –≤–∞—à–µ–º —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–µ.

2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥
–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ QR-–∫–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

3Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥
1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard.
2. –ù–∞–∂–º–∏—Ç–µ ‚Äú–î–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å‚Äù.
3. –í—ã–±–µ—Ä–∏—Ç–µ ‚Äú–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞‚Äù –∏–ª–∏ ‚Äú–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥‚Äù.
4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–∑ –±–æ—Ç–∞.

4Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å
1. –ù–∞–π–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç—É–Ω–Ω–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ.
2. –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å.
3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ‚Äú–ê–∫—Ç–∏–≤–Ω–æ‚Äù.
4. –¢–µ–ø–µ—Ä—å –≤–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∑–∞—â–∏—â—ë–Ω –∏ —Å–≤–æ–±–æ–¥–µ–Ω!

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å. üí¨`, { parse_mode: 'HTML' });;

            await handleSubscription(bot, chatId, data);
            await createVlessConfig(bot, username);
            await bot.sendDocuments(chatId, "./vless-" + username  + ".conf")
	}
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã:", error);
        await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.");
    }
}

export async function createPayout(){
      try {
    
        const response = await axios.post(
          'https://api.yookassa.ru/v3/payouts',
          {
            amount: {
              value: amount,
              currency: "RUB"
            },
            payout_destination_data: {
              type: "sbp",
              phone: phone,
              bank_id: bankId
            },
            description: "–í—ã–≤–æ–¥",
            metadata: {
              order_id: "37"
            }
          },
          {
            headers: {
              'Idempotence-Key': uuid.v4(),
              'Content-Type': 'application/json'
            },
            auth: {
              username: process.env.YOOKASSA_SHOPID,
              password: process.env.YOOKASSA_SECRET_KEY
            }
          }
        );

        console.log(response.data)
      } catch (error) {
        res.status(500).json(error)
        console.error('Error making payout:', error);
      }
    }
